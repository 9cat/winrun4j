

xll4j server

- get number of functions
- get function details (name, arg names, arg info, function info)
- get number of commands
- get command details 
- invoke function
- invoke command



callback:
- excel4
- get version
- set last error

- use (same directory)
	myaddin.xll 
	myaddin.exe - automation server
	myaddin.ini - shared args
	

ini file:

- addin.class
- vmargs (including classpath)
- version

- server clsid, server iid, xll clsid, xll iid.

addin should register based on xll name and version (progid autogen).



==== WinRun4J ===========================================================================================
                   
DDE testing
- loading from zip file doesn't work

- add a single.instance option; detect if another instance is running. if it is then bring the
  main window (?) for the application to focus.
  



==== XLL4J ================================================================================================

- support commands, menus, toolbars
- support auto register
- cleanup functions, commands, menus, toolbars on auto close

- think about using/supporting annotations.
- handle overloaded functions (match the input args to the function args)
- add ability to add excel menus/commands
- add com layer so functions can be used from vba
- add a mechanism to ReflectAddin to allow semi-permanent Storage of returned objects (plus a clear/refresh button).
- add function namespacing option to ini file.
- work out how event dispatch thread will work with addin menus/commands so that SWT and swing/awt can be used.
- performance tests

- make the object registry cache a WeakHashMap. This should free up memory when required...
- XLObjectConvert.convertArray need to swap Object[][]
- change registry to use weak hash map
- try to read in an object array (either from reference for return from function) and convert into object
- free vm library in CleanupVM method.
- check that XLArray.asArray is valid (eg. Excel might be freeing memory there)
- date is a double with jan 01 1900 00:000 = 0, each day is 1.
- write csv parser to attempt a parse on objects read in.
- create a table class:
	- support filtering (eg. "notional","<x") (use jep)
	- support aggregation fields
	- support GetDistinctValue(columnname)
	- support join on multiple tables
	- support filter callback routine


==== JNI ================================================================================================

Native Type 	Java Language Type 	Description 		Type signature
unsigned char 	jboolean 			unsigned 8 bits 	Z
signed char 	jbyte 				signed 8 bits 		B
unsigned short 	jchar 				unsigned 16 bits 	C
short 			jshort 				signed 16 bits 		S
long 			jint 				signed 32 bits 		I
long long		jlong 				signed 64 bits 		J
float 			jfloat 				32 bits 			F
double 			jdouble 			64 bits 			D

