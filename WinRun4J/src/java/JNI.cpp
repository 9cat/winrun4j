/*******************************************************************************
* This program and the accompanying materials
* are made available under the terms of the Common Public License v1.0
* which accompanies this distribution, and is available at 
* http://www.eclipse.org/legal/cpl-v10.html
* 
* Contributors:
*     Peter Smith
*******************************************************************************/

#include "JNI.h"
#include "../common/Log.h"

// Use to store a reference to our embedded classloader (if required)
static jclass g_classLoaderClass = NULL;
static jobject g_classLoader = NULL;
static jmethodID g_findClassMethod = NULL;

void JNI::Init(JNIEnv* env)
{
	// Simply attempt to load the embedded classloader if required
	LoadEmbbededClassloader(env);
}

jclass JNI::FindClass(JNIEnv* env, TCHAR* classStr)
{
	if(g_classLoader == NULL) {
		return env->FindClass(classStr);
	}

	TCHAR t[1024];
	strcpy(t, classStr);
	int len = strlen(classStr);
	for(int i = 0; i < len; i++) 
		if(t[i] == '/') t[i] = '.';

	jclass cl = (jclass) env->CallObjectMethod(g_classLoader, g_findClassMethod, env->NewStringUTF(t));
	// Workaround for JDK bug
	if(cl) {
		CallStringMethod(env, env->GetObjectClass(cl), cl, "getName");
	}
	return cl;
}

bool JNI::RunMainClass( JNIEnv* env, TCHAR* mainClassStr, TCHAR* progArgs[] )
{
	jclass mainClass = FindClass(env, mainClassStr);

	if(mainClass == NULL) {
		Log::Error("Could not find main class");
		return false;
	}
	
	jclass stringClass = env->FindClass("java/lang/String");
	if(stringClass == NULL) {
		Log::Error("Could not find String class");
		return false;
	}

	// Count the args
	int argc = 0;
	while(progArgs[argc++] != NULL);

	// Create the run args
	jobjectArray args = env->NewObjectArray(argc - 1, stringClass, NULL);
	for(int i = 0; i < argc - 1; i++) {
		env->SetObjectArrayElement(args, i, env->NewStringUTF(progArgs[i]));
	}

	jmethodID mainMethod = env->GetStaticMethodID(mainClass, "main", "([Ljava/lang/String;)V");
	if(mainMethod == NULL) {
		Log::Error("Could not find main method.");
		return false;
	}

	env->CallStaticVoidMethod(mainClass, mainMethod, args);

	PrintStackTrace(env);
	ClearException(env);

	return true;
}

char* JNI::CallStringMethod(JNIEnv* env, jclass clazz, jobject obj, char* name)
{
	jmethodID methodID = env->GetMethodID(clazz, name, "()Ljava/lang/String;");
	if(methodID == NULL) {
		Log::SetLastError("Could not find '%s' method", name);
		return NULL;
	}

	jstring str = (jstring) env->CallObjectMethod(obj, methodID);
	if(str == NULL) {
		return NULL;
	}

	if(env->ExceptionCheck()) {
		JNI::PrintStackTrace(env);
		return NULL;
	}

	jboolean iscopy = false;
	const char* chars = env->GetStringUTFChars(str, &iscopy);
	char* tmp = strdup(chars);
	env->ReleaseStringUTFChars(str, chars);
	return tmp;
}

const bool JNI::CallBooleanMethod(JNIEnv* env, jclass clazz, jobject obj, char* name)
{
	jmethodID methodID = env->GetMethodID(clazz, name, "()Z");
	if(methodID == NULL) {
		Log::SetLastError("Could not find '%s' method", name);
		return NULL;
	}

	return env->CallBooleanMethod(obj, methodID);
}

// Dump stack trace for exception (if present)
jthrowable JNI::PrintStackTrace(JNIEnv* env)
{
	jthrowable thr = env->ExceptionOccurred();
	if(thr) {
		// Print out the stack trace for this exception
		jclass c = env->GetObjectClass(thr);
		jmethodID m = env->GetMethodID(c, "printStackTrace", "()V");
		if(m) 
			env->CallVoidMethod(thr, m);
		else {
			env->ExceptionClear();
			m = env->GetMethodID(c, "printStackTrace", "(Ljava/io/PrintStream;)V");
			jclass sc = env->FindClass("java/lang/System");
			jfieldID sof = env->GetStaticFieldID(sc, "out", "Ljava/io/PrintStream;");
			jobject so = env->GetStaticObjectField(sc, sof);
			env->CallVoidMethod(thr, m, so);
		}
		env->ExceptionClear();
	}
	return thr;
}

// Clear JNI exception
void JNI::ClearException(JNIEnv* env)
{
	if(env && env->ExceptionOccurred()) {
		env->ExceptionClear();
	}
}

// The java code for the EmbeddedClassLoader - used to load classes
// from jars embedded inside executabless
static BYTE g_classLoaderCode[] = {
    0xca, 0xfe, 0xba, 0xbe, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x70, 
    0x07, 0x00, 0x02, 0x01, 0x00, 0x32, 0x6f, 0x72, 0x67, 0x2f, 
    0x62, 0x6f, 0x72, 0x69, 0x73, 0x2f, 0x77, 0x69, 0x6e, 0x72, 
    0x75, 0x6e, 0x34, 0x6a, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 
    0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x45, 0x6d, 0x62, 
    0x65, 0x64, 0x64, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 
    0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x07, 0x00, 0x04, 0x01, 
    0x00, 0x15, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
    0x67, 0x2f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x6f, 0x61, 
    0x64, 0x65, 0x72, 0x01, 0x00, 0x04, 0x6a, 0x61, 0x72, 0x73, 
    0x01, 0x00, 0x13, 0x5b, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 
    0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 
    0x67, 0x3b, 0x01, 0x00, 0x02, 0x68, 0x6d, 0x01, 0x00, 0x13, 
    0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x75, 0x74, 0x69, 0x6c, 
    0x2f, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x3b, 0x01, 
    0x00, 0x06, 0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00, 
    0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 
    0x65, 0x0a, 0x00, 0x03, 0x00, 0x0d, 0x0c, 0x00, 0x0e, 0x00, 
    0x0f, 0x01, 0x00, 0x14, 0x67, 0x65, 0x74, 0x53, 0x79, 0x73, 
    0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x6f, 
    0x61, 0x64, 0x65, 0x72, 0x01, 0x00, 0x19, 0x28, 0x29, 0x4c, 
    0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 
    0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x65, 
    0x72, 0x3b, 0x0a, 0x00, 0x03, 0x00, 0x11, 0x0c, 0x00, 0x09, 
    0x00, 0x12, 0x01, 0x00, 0x1a, 0x28, 0x4c, 0x6a, 0x61, 0x76, 
    0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x43, 0x6c, 0x61, 
    0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x3b, 0x29, 
    0x56, 0x07, 0x00, 0x14, 0x01, 0x00, 0x11, 0x6a, 0x61, 0x76, 
    0x61, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x48, 0x61, 0x73, 
    0x68, 0x4d, 0x61, 0x70, 0x0a, 0x00, 0x13, 0x00, 0x16, 0x0c, 
    0x00, 0x09, 0x00, 0x0a, 0x09, 0x00, 0x01, 0x00, 0x18, 0x0c, 
    0x00, 0x07, 0x00, 0x08, 0x0a, 0x00, 0x01, 0x00, 0x1a, 0x0c, 
    0x00, 0x1b, 0x00, 0x1c, 0x01, 0x00, 0x08, 0x6c, 0x69, 0x73, 
    0x74, 0x4a, 0x61, 0x72, 0x73, 0x01, 0x00, 0x27, 0x28, 0x4c, 
    0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 
    0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x29, 0x5b, 0x4c, 
    0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 
    0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x09, 0x00, 0x01, 
    0x00, 0x1e, 0x0c, 0x00, 0x05, 0x00, 0x06, 0x0a, 0x00, 0x01, 
    0x00, 0x20, 0x0c, 0x00, 0x21, 0x00, 0x22, 0x01, 0x00, 0x06, 
    0x67, 0x65, 0x74, 0x4a, 0x61, 0x72, 0x01, 0x00, 0x28, 0x28, 
    0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 
    0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x4c, 0x6a, 
    0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 
    0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x29, 0x5b, 0x42, 0x0a, 
    0x00, 0x13, 0x00, 0x24, 0x0c, 0x00, 0x25, 0x00, 0x26, 0x01, 
    0x00, 0x03, 0x70, 0x75, 0x74, 0x01, 0x00, 0x38, 0x28, 0x4c, 
    0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 
    0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3b, 0x4c, 0x6a, 0x61, 
    0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 
    0x6a, 0x65, 0x63, 0x74, 0x3b, 0x29, 0x4c, 0x6a, 0x61, 0x76, 
    0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 
    0x65, 0x63, 0x74, 0x3b, 0x01, 0x00, 0x09, 0x66, 0x69, 0x6e, 
    0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x01, 0x00, 0x25, 0x28, 
    0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 
    0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x29, 0x4c, 
    0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 
    0x43, 0x6c, 0x61, 0x73, 0x73, 0x3b, 0x01, 0x00, 0x0a, 0x45, 
    0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x07, 
    0x00, 0x2b, 0x01, 0x00, 0x20, 0x6a, 0x61, 0x76, 0x61, 0x2f, 
    0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x43, 0x6c, 0x61, 0x73, 0x73, 
    0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x78, 
    0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x00, 0x2d, 
    0x00, 0x2f, 0x07, 0x00, 0x2e, 0x01, 0x00, 0x10, 0x6a, 0x61, 
    0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 
    0x72, 0x69, 0x6e, 0x67, 0x0c, 0x00, 0x30, 0x00, 0x31, 0x01, 
    0x00, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x01, 
    0x00, 0x16, 0x28, 0x43, 0x43, 0x29, 0x4c, 0x6a, 0x61, 0x76, 
    0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 
    0x69, 0x6e, 0x67, 0x3b, 0x08, 0x00, 0x33, 0x01, 0x00, 0x06, 
    0x2e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x0a, 0x00, 0x2d, 0x00, 
    0x35, 0x0c, 0x00, 0x36, 0x00, 0x37, 0x01, 0x00, 0x06, 0x63, 
    0x6f, 0x6e, 0x63, 0x61, 0x74, 0x01, 0x00, 0x26, 0x28, 0x4c, 
    0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 
    0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x29, 0x4c, 0x6a, 
    0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 
    0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x0a, 0x00, 0x13, 0x00, 
    0x39, 0x0c, 0x00, 0x3a, 0x00, 0x3b, 0x01, 0x00, 0x03, 0x67, 
    0x65, 0x74, 0x01, 0x00, 0x26, 0x28, 0x4c, 0x6a, 0x61, 0x76, 
    0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 
    0x65, 0x63, 0x74, 0x3b, 0x29, 0x4c, 0x6a, 0x61, 0x76, 0x61, 
    0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 
    0x63, 0x74, 0x3b, 0x07, 0x00, 0x3d, 0x01, 0x00, 0x02, 0x5b, 
    0x42, 0x07, 0x00, 0x3f, 0x01, 0x00, 0x1c, 0x6a, 0x61, 0x76, 
    0x61, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x7a, 0x69, 0x70, 
    0x2f, 0x5a, 0x69, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 
    0x74, 0x72, 0x65, 0x61, 0x6d, 0x07, 0x00, 0x41, 0x01, 0x00, 
    0x1c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x69, 0x6f, 0x2f, 0x42, 
    0x79, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 
    0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x0a, 
    0x00, 0x40, 0x00, 0x43, 0x0c, 0x00, 0x09, 0x00, 0x44, 0x01, 
    0x00, 0x05, 0x28, 0x5b, 0x42, 0x29, 0x56, 0x0a, 0x00, 0x3e, 
    0x00, 0x46, 0x0c, 0x00, 0x09, 0x00, 0x47, 0x01, 0x00, 0x18, 
    0x28, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x69, 0x6f, 0x2f, 
    0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 
    0x6d, 0x3b, 0x29, 0x56, 0x0a, 0x00, 0x49, 0x00, 0x4b, 0x07, 
    0x00, 0x4a, 0x01, 0x00, 0x16, 0x6a, 0x61, 0x76, 0x61, 0x2f, 
    0x75, 0x74, 0x69, 0x6c, 0x2f, 0x7a, 0x69, 0x70, 0x2f, 0x5a, 
    0x69, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x0c, 0x00, 0x4c, 
    0x00, 0x4d, 0x01, 0x00, 0x07, 0x67, 0x65, 0x74, 0x4e, 0x61, 
    0x6d, 0x65, 0x01, 0x00, 0x14, 0x28, 0x29, 0x4c, 0x6a, 0x61, 
    0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 
    0x72, 0x69, 0x6e, 0x67, 0x3b, 0x0a, 0x00, 0x2d, 0x00, 0x4f, 
    0x0c, 0x00, 0x50, 0x00, 0x51, 0x01, 0x00, 0x06, 0x65, 0x71, 
    0x75, 0x61, 0x6c, 0x73, 0x01, 0x00, 0x15, 0x28, 0x4c, 0x6a, 
    0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 
    0x62, 0x6a, 0x65, 0x63, 0x74, 0x3b, 0x29, 0x5a, 0x07, 0x00, 
    0x53, 0x01, 0x00, 0x1d, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x69, 
    0x6f, 0x2f, 0x42, 0x79, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 
    0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 
    0x65, 0x61, 0x6d, 0x0a, 0x00, 0x52, 0x00, 0x16, 0x0a, 0x00, 
    0x52, 0x00, 0x56, 0x0c, 0x00, 0x57, 0x00, 0x58, 0x01, 0x00, 
    0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x01, 0x00, 0x07, 0x28, 
    0x5b, 0x42, 0x49, 0x49, 0x29, 0x56, 0x0a, 0x00, 0x3e, 0x00, 
    0x5a, 0x0c, 0x00, 0x5b, 0x00, 0x5c, 0x01, 0x00, 0x04, 0x72, 
    0x65, 0x61, 0x64, 0x01, 0x00, 0x05, 0x28, 0x5b, 0x42, 0x29, 
    0x49, 0x0a, 0x00, 0x52, 0x00, 0x5e, 0x0c, 0x00, 0x5f, 0x00, 
    0x60, 0x01, 0x00, 0x0b, 0x74, 0x6f, 0x42, 0x79, 0x74, 0x65, 
    0x41, 0x72, 0x72, 0x61, 0x79, 0x01, 0x00, 0x04, 0x28, 0x29, 
    0x5b, 0x42, 0x0a, 0x00, 0x01, 0x00, 0x62, 0x0c, 0x00, 0x63, 
    0x00, 0x64, 0x01, 0x00, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 
    0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x01, 0x00, 0x29, 0x28, 
    0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 
    0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x5b, 0x42, 
    0x49, 0x49, 0x29, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 
    0x61, 0x6e, 0x67, 0x2f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x3b, 
    0x0a, 0x00, 0x3e, 0x00, 0x66, 0x0c, 0x00, 0x67, 0x00, 0x68, 
    0x01, 0x00, 0x0c, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 
    0x45, 0x6e, 0x74, 0x72, 0x79, 0x01, 0x00, 0x1a, 0x28, 0x29, 
    0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x75, 0x74, 0x69, 0x6c, 
    0x2f, 0x7a, 0x69, 0x70, 0x2f, 0x5a, 0x69, 0x70, 0x45, 0x6e, 
    0x74, 0x72, 0x79, 0x3b, 0x0a, 0x00, 0x2a, 0x00, 0x6a, 0x0c, 
    0x00, 0x09, 0x00, 0x6b, 0x01, 0x00, 0x2a, 0x28, 0x4c, 0x6a, 
    0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 
    0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x4c, 0x6a, 0x61, 0x76, 
    0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x54, 0x68, 0x72, 
    0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x3b, 0x29, 0x56, 0x0a, 
    0x00, 0x03, 0x00, 0x6d, 0x0c, 0x00, 0x27, 0x00, 0x28, 0x07, 
    0x00, 0x6f, 0x01, 0x00, 0x13, 0x6a, 0x61, 0x76, 0x61, 0x2f, 
    0x69, 0x6f, 0x2f, 0x49, 0x4f, 0x45, 0x78, 0x63, 0x65, 0x70, 
    0x74, 0x69, 0x6f, 0x6e, 0x00, 0x21, 0x00, 0x01, 0x00, 0x03, 
    0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x05, 0x00, 0x06, 
    0x00, 0x00, 0x00, 0x02, 0x00, 0x07, 0x00, 0x08, 0x00, 0x00, 
    0x00, 0x04, 0x00, 0x01, 0x00, 0x09, 0x00, 0x0a, 0x00, 0x01, 
    0x00, 0x0b, 0x00, 0x00, 0x00, 0x54, 0x00, 0x04, 0x00, 0x03, 
    0x00, 0x00, 0x00, 0x48, 0x2a, 0xb8, 0x00, 0x0c, 0xb7, 0x00, 
    0x10, 0x2a, 0xbb, 0x00, 0x13, 0x59, 0xb7, 0x00, 0x15, 0xb5, 
    0x00, 0x17, 0x2a, 0x2a, 0x01, 0xb7, 0x00, 0x19, 0xb5, 0x00, 
    0x1d, 0x03, 0x3c, 0xa7, 0x00, 0x21, 0x2a, 0x01, 0x2a, 0xb4, 
    0x00, 0x1d, 0x1b, 0x32, 0xb7, 0x00, 0x1f, 0x4d, 0x2a, 0xb4, 
    0x00, 0x17, 0x2a, 0xb4, 0x00, 0x1d, 0x1b, 0x32, 0x2c, 0xb6, 
    0x00, 0x23, 0x57, 0x84, 0x01, 0x01, 0x1b, 0x2a, 0xb4, 0x00, 
    0x1d, 0xbe, 0xa1, 0xff, 0xdc, 0xb1, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x04, 0x00, 0x27, 0x00, 0x28, 0x00, 0x02, 0x00, 0x29, 
    0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x2a, 0x00, 0x0b, 
    0x00, 0x00, 0x00, 0xd2, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 
    0x00, 0xb6, 0x2b, 0x10, 0x2e, 0x10, 0x2f, 0xb6, 0x00, 0x2c, 
    0x12, 0x32, 0xb6, 0x00, 0x34, 0x4d, 0x03, 0x3e, 0xa7, 0x00, 
    0x97, 0x2a, 0xb4, 0x00, 0x17, 0x2a, 0xb4, 0x00, 0x1d, 0x1d, 
    0x32, 0xb6, 0x00, 0x38, 0xc0, 0x00, 0x3c, 0x3a, 0x04, 0xbb, 
    0x00, 0x3e, 0x59, 0xbb, 0x00, 0x40, 0x59, 0x19, 0x04, 0xb7, 
    0x00, 0x42, 0xb7, 0x00, 0x45, 0x3a, 0x05, 0x01, 0x3a, 0x06, 
    0xa7, 0x00, 0x4f, 0x2c, 0x19, 0x06, 0xb6, 0x00, 0x48, 0xb6, 
    0x00, 0x4e, 0x99, 0x00, 0x43, 0xbb, 0x00, 0x52, 0x59, 0xb7, 
    0x00, 0x54, 0x3a, 0x07, 0x11, 0x10, 0x00, 0xbc, 0x08, 0x3a, 
    0x08, 0x03, 0x36, 0x09, 0xa7, 0x00, 0x0d, 0x19, 0x07, 0x19, 
    0x08, 0x03, 0x15, 0x09, 0xb6, 0x00, 0x55, 0x19, 0x05, 0x19, 
    0x08, 0xb6, 0x00, 0x59, 0x59, 0x36, 0x09, 0x9d, 0xff, 0xec, 
    0x19, 0x07, 0xb6, 0x00, 0x5d, 0x3a, 0x0a, 0x2a, 0x2b, 0x19, 
    0x0a, 0x03, 0x19, 0x0a, 0xbe, 0xb6, 0x00, 0x61, 0xb0, 0x19, 
    0x05, 0xb6, 0x00, 0x65, 0x59, 0x3a, 0x06, 0xc7, 0xff, 0xac, 
    0xa7, 0x00, 0x10, 0x3a, 0x07, 0xbb, 0x00, 0x2a, 0x59, 0x2b, 
    0x19, 0x07, 0xb7, 0x00, 0x69, 0xbf, 0x84, 0x03, 0x01, 0x1d, 
    0x2a, 0xb4, 0x00, 0x1d, 0xbe, 0xa1, 0xff, 0x66, 0x2a, 0x2b, 
    0xb7, 0x00, 0x6c, 0xb0, 0x00, 0x02, 0x00, 0x3a, 0x00, 0x88, 
    0x00, 0x97, 0x00, 0x6e, 0x00, 0x89, 0x00, 0x94, 0x00, 0x97, 
    0x00, 0x6e, 0x00, 0x00, 0x01, 0x02, 0x00, 0x1b, 0x00, 0x1c, 
    0x00, 0x00, 0x01, 0x02, 0x00, 0x21, 0x00, 0x22, 0x00, 0x00, 
    0x00, 0x00
};

jobjectArray JNI::ListJars(JNIEnv* env, jobject self, jstring library)
{
	// Currently we don't support libraries other than the executable
	if(library)
		return NULL;

	int resId = 1;
	HRSRC hs;
	while((hs = FindResource(NULL, MAKEINTRESOURCE(resId), RT_JAR_FILE)) != NULL) {
		resId++;
	}
	jclass c = env->FindClass("java/lang/String");
	jobjectArray a = env->NewObjectArray(resId-1, c, 0);
	for(int i = 1; i < resId; i++) {
		hs = FindResource(NULL, MAKEINTRESOURCE(i), RT_JAR_FILE);
		HGLOBAL hg = LoadResource(NULL, hs);
		LPBYTE pb = (LPBYTE) LockResource(hg);
		DWORD* pd = (DWORD*) pb;
		if(*pd == JAR_RES_MAGIC) {
			const char* n = (const char *) &pb[RES_MAGIC_SIZE];
			env->SetObjectArrayElement(a, i-1, env->NewStringUTF(n));
		}
	}
	return a;
}

jobject JNI::GetJar(JNIEnv* env, jobject self, jstring library, jstring jarName)
{
	// Currently we don't support libraries other than the executable
	if(library)
		return NULL;

	if(!jarName)
		return NULL;

	jboolean iscopy = false;
	const char* jn = env->GetStringUTFChars(jarName, &iscopy);

	int resId = 1;
	HRSRC hs;
	while((hs = FindResource(NULL, MAKEINTRESOURCE(resId), RT_JAR_FILE)) != NULL) {
		HGLOBAL hg = LoadResource(NULL, hs);
		PBYTE pb = (PBYTE) LockResource(hg);
		DWORD* pd = (DWORD*) pb;
		if(*pd == JAR_RES_MAGIC) {
			int l = strlen((char*) &pb[RES_MAGIC_SIZE]);
			if(strcmp(jn, (char*) &pb[RES_MAGIC_SIZE]) == 0) {
				DWORD offset = RES_MAGIC_SIZE + l + 1;
				DWORD s = SizeofResource(NULL, hs);
				return env->NewDirectByteBuffer(&pb[offset], s - offset);
			}
		}
		resId++;
	}

	return 0;
}

bool JNI::SetClassLoaderJars(JNIEnv* env, jobject classloader)
{
	int resId = 1;
	HRSRC hs;
	while((hs = FindResource(NULL, MAKEINTRESOURCE(resId), RT_JAR_FILE)) != NULL) {
		resId++;
	}

	jclass ba = env->FindClass("[B");
	if(!ba) {
		Log::Error("Could not find byte array class");
		return false;
	}

	jobjectArray a = env->NewObjectArray(resId - 1, ba, 0);
	if(!a) {
		Log::Error("Could not create jar byte array");
	}

	resId = 1;
	while((hs = FindResource(NULL, MAKEINTRESOURCE(resId), RT_JAR_FILE)) != NULL) {
		HGLOBAL hg = LoadResource(NULL, hs);
		PBYTE pb = (PBYTE) LockResource(hg);
		DWORD* pd = (DWORD*) pb;
		if(*pd == JAR_RES_MAGIC) {
			int len = strlen((char*) &pb[RES_MAGIC_SIZE]);
			DWORD offset = RES_MAGIC_SIZE + len + 1;
			DWORD s = SizeofResource(NULL, hs);
			jbyteArray jb = env->NewByteArray(s - offset);
			env->SetByteArrayRegion(jb, 0, s-offset, (const jbyte*) &pb[offset]); 
			env->SetObjectArrayElement(a, resId - 1, jb);
			if(env->ExceptionCheck()) 
				PrintStackTrace(env);
		}
		resId++;
	}

	jfieldID jf = env->GetFieldID(env->GetObjectClass(classloader), "jarData", "[[B");
	if(!jf) {
		Log::Error("Could not access EmbeddedClassLoader.jarData field");
		ClearException(env);
		return false;
	}

	env->SetObjectField(classloader, jf, a);
	if(env->ExceptionCheck()) {
		Log::Error("Could not set EmbeddedClassLoader.jarData field");
		PrintStackTrace(env);
		return false;
	}

	return true;
}

jclass JNI::DefineClass(JNIEnv* env, const char* filename, const char* name, jobject loader) 
{
	// Read in file from temp source
	HANDLE hFile = CreateFile(filename, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
	DWORD cbBuffer = GetFileSize(hFile, 0);
	PBYTE pBuffer = (PBYTE) malloc(cbBuffer);
	ReadFile(hFile, pBuffer, cbBuffer, &cbBuffer, 0);
	CloseHandle(hFile);
	jclass cl = env->DefineClass(name, loader, (const jbyte*) pBuffer, cbBuffer);
	free(pBuffer);
	return cl;
}

void JNI::LoadEmbbededClassloader(JNIEnv* env)
{
	// First we check if there are any embedded jars
	if(!FindResource(NULL, MAKEINTRESOURCE(1), RT_JAR_FILE))
		return;

	// We need to grab a reference to the system clasloader via the 
	// ClassLoader.getSystemClassLoader method
	jclass loaderClass = env->FindClass("java/lang/ClassLoader"); 
	if(!loaderClass) {
		Log::Error("Could not access classloader");
		return;
	}

	jmethodID loaderMethod = env->GetStaticMethodID(loaderClass, "getSystemClassLoader", "()Ljava/lang/ClassLoader;");
	if(!loaderMethod) {
		Log::Error("Could not access classloader method");
		return;
	}

	// Grab the system loader and create a global ref
	jobject loader = env->CallStaticObjectMethod(loaderClass, loaderMethod);
	loader = env->NewGlobalRef(loader);

	// Read in file from temp source - TODO load from static memory
	jclass cl = DefineClass(env, "F:/eclipse/workspace/org.boris.winrun4j.classloader/bin/org/boris/winrun4j/classloader/EmbeddedClassLoader.class",
		"org/boris/winrun4j/classloader/EmbeddedClassLoader", loader);

	if(!cl) {
		PrintStackTrace(env);
		Log::Error("Could not load embedded classloader");
		return;
	}

	g_classLoaderClass = (jclass) env->NewGlobalRef(cl);

	jmethodID ctor = env->GetMethodID(g_classLoaderClass, "<init>", "()V");
	if(!ctor) {
		Log::Error("Could not access classloader constructor");
		return;
	}

	jobject o = env->NewObject(g_classLoaderClass, ctor);
	if(!o) {
		PrintStackTrace(env);
		Log::Error("Could not create classloader instance");
		return;
	}

	if(!SetClassLoaderJars(env, o)) {
		return;
	}

	g_classLoader = env->NewGlobalRef(o);

	// Grab a reference to the find class method
	g_findClassMethod = env->GetMethodID(g_classLoaderClass, "findClass", "(Ljava/lang/String;)Ljava/lang/Class;");
	if(!g_findClassMethod) {
		PrintStackTrace(env);
		Log::Error("Could not access find ClassLoader.findClass method");
		g_classLoader = NULL;
		return;
	}
}
