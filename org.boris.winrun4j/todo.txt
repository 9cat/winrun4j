

RCEDIT:
- add manifest
TODO - add version info struct

Launcher
- OutputDebugString -> logger
- fix for service reference bug
- fix for ini override option bug

TODO
- double check max memory args just before starting VM (ie. after loading the DLLs)


Release Notes for WinRun4J 0.4.0
================================

- Added Shell utilities:
	- get logical drives
	- get environment variables
	- get command line
	- get OS version info
	- get tick count since machine started
	- file move operation (eg. delay until reboot)
- Added file system monitor (to detect file changes in a directory)
- Added binary resource API (load/extract resources from an EXE/DLL)

Fixes
=====

- max memory on 64 bit vm - not limited by 32 bit address space
- check icon setting on 64bit vm
- expose environment variable setting API



	
improvements:
- ideally we want to share the runtime library with the jvm to avoid loading
  an extra library - so write a runtime wrapper that detects the library
  that the jvm wants and uses that (may notwork if ini parser requires floating
   point parsing).
- should fallback to setDlldirectory method on jvm loading if we cannot find the
  correct runtime library - this should future proof us
 
	
- Native class: release basic api plus current integration (API should be ok)
- Once we have callbacks in place, then we can integrate service and dde, registry and
  built-in classloader (possibly classpath expansion)
- Also build a DLL that exposes the Native native method handlers so we can use
  all the win32 stuff as a standalone
  
- task manager (process stats) as an eclipse plugin (view). allow users to 
  view, sort, filter
  plus extra attributes, like open ports, files
- built-in explorer view
- full com bridge?


- pecoff4j: generator for DLLs (eg. list of functions to export with bindings to java functions?)

- support for unicode in registry 
- support for x64 access (done just needs testing)

- generate a bunch of precanned launchers for things:
	- lisp interpreter exe using jatha
	- maybe rss to email
	- implement dir or ls
	- implement a cdx command - it knows or indexes all directory names and pattern matches
	- curl: http://curl.haxx.se/docs/manpage.html

Eclipse Plugin
==============

- Allow extra/arbitary properties to be specified in launcher INI
	(eg. can use as a properties file server.port=1232) 
- Memory settings in exporter
- Option to use only a selection of items to include in export
	 (build up resource selection tree from classpath)
	 (option to recursively check for dependencies (ie. grab class files, check import statements))
- Maybe remove command line arguments on export?

Misc
====

- Improve error messages for different types of startup isues:
	- cannot find old enough version (eg. require <1.5)
	- cannot find new enough version
	- need 64-bit version
	- launch the following when cannot find:
		ShellExecute(NULL,"open","http://www.java.com/en/download/manual.jsp",NULL,NULL,SW_SHOWNORMAL);
	- see here for customizing a messagebox to give further options:
		http://www.codeguru.com/cpp/w-p/win32/messagebox/article.php/c10873
    - option to enable/disable this feature
    
    - error message when single instance kicks in (eg. like firefox "Another instance of ....")
    
    notfound.title=
    notfound.message=
    notfound.ok.label=
    notfound.cancel.label=
    notfound.ok.url=
 
- Further enhancements to logging
	- option to specify markers for logging (or switch off)
	- log rolling after specified size
	- maybe integrate log4j - ie. add a logger factory on the log class?
	
- Add vm.type option (ie. "client" or "server")
- Allow vm.permsize.percent, vm.permsize.preferred
- Think about vm memory "profiles", eg. dynamic app (large perm size), static server etc...

- Add flag to register file associations on startup?
- Read only key handle to registry key api

- Flag for registering native methods on launcher library (switch off for speed)
	- perhaps switch off by default (eclipse launcher can detect if library is present?)
	- jni.register=true

- Allow setting of environment variables in INI? 
- Should set WINRUN4J_DIR environment variable on startup so it can be used in INI file
- Allow getting of environment variables (so to provide access from 1.4)  
  
- generate event log message dlls on the fly using pecoff4j?

- look at i/o completion ports. maybe possible to multiplex stdout to console and log file.

- look at shutdown hooks - see if they work.

- integrate monitor directory ReadDirectoryChanges()
	
	
Resources
=========

- check launch4j and others for their format for storing jars in exe and
  try to be compatible
- allow embedding of html to display if launcher cannot find appropriate
  java version
  	ShellExecute(..., "res://path.to.exe?")
- add an api for accessing arbitrary resources on an exe/module
- associate a file type with secondary (or other) icon embedded.

? Maybe integrate RCEDIT into winrun4j binary and remove existing run on itself
  features. Should be minimal size overhead and would add useful features.  

Splash Screen
=============

- allow user to change splash image on the fly 
- allow user to store splash image in jar and specify via manifest
    (need a flag in INI: splash.searchManifest=true)
- add option to ini for initial setting of splash text:
	splash.text=Loading...
	splash.text.location=15,56
	splash.text.font=Arial
	splash.text.fontsize=14
	splash.text.rgb=23,56,12

Service Support
===============

- add checking for JVM hang 
	- the normal way is to have a native thread that attempts to call a java method (eg. System.timeinmiss)
	  if this fails to return in a "reasonable" length of time we have a problem i guess...
- restart the app
	- This could be achieved by creating a new built in command called "--WinRun4J:Restart <PID> <args>"
	  We wait for the PID to die then relaunch itself with args.
	- Will need a special one for restarting a service...
- automatically add -Xrs?
- should the service log failure messages to event log?


Build/Release
=============

- console version option to add "Press any key to continue..." at the end ??
- look at supporting an open source VM impl. possibly build a version that includes
  a VM (ie. statically link the VM to the executable). maybe jamvm.

OSGI Support
============

- create an osgi launcher. start with eclipse. embedded launcher for directory
  of jars with versions etc...
  equinox.application=org.boris.xlloop.dataservice.XLLoopDataService
  should create one for applications and one for services.    
- eclipse integration (run/debug winrun4j application)
- write an article about osgi service as windows service.
- create a bundle startup service + native filesystem listener for extra
  bundles that automatically get installed/started
  * probably need specific implementations for each osgi implementation...
 
  
