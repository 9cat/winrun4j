Release 0.3.3
=============

- Moved service name, description and controls accepted to INI file
- Refactored Service interface and added AbstractService helper class
- Implemented FileAssociations helper class
- Greatly improved the Registry API
- Option to log to console and file
- Log file rolling
- Fix for relative log file path

service helper class (maybe a callable, with start/stop).

- support for unicode in registry 
- support for x64 access (done just needs testing)

- generate a bunch of precanned launchers for things:
	- lisp interpreter exe using jatha
	- maybe rss to email
	- twitter to file (eg. backup?) (this could just be rss)
	- implement dir or ls
	- implement a cdx command - it knows or indexes all directory names and pattern matches
	- curl: http://curl.haxx.se/docs/manpage.html

Eclipse Plugin
==============

- Allow extra/arbitary properties to be specified in launcher INI
	(eg. can use as a properties file server.port=1232) 
- Memory settings in exporter
- Option to use only a selection of items to include in export
	 (build up resource selection tree from classpath)
	 (option to recursively check for dependencies (ie. grab class files, check import statements))

Misc
====

- Improve error messages for different types of startup isues:
	- cannot find old enough version (eg. require <1.5)
	- cannot find new enough version
	- need 64-bit version
	- launch the following when cannot find:
		ShellExecute(NULL,"open","http://www.java.com/en/download/manual.jsp",NULL,NULL,SW_SHOWNORMAL);
	- see here for customizing a messagebox to give further options:
		http://www.codeguru.com/cpp/w-p/win32/messagebox/article.php/c10873
    - option to enable/disable this feature
    
    - error message when single instance kicks in (eg. like firefox "Another instance of ....")
    
    notfound.title=
    notfound.message=
    notfound.ok.label=
    notfound.cancel.label=
    notfound.ok.url=
 
- Further enhancements to logging
	- option to specify markers for logging (or switch off)
	- log rolling after specified size
	- maybe integrate log4j - ie. add a logger factory on the log class?
	
- Add vm.type option (ie. "client" or "server")
- Allow vm.permsize.percent, vm.permsize.preferred
- Think about vm memory "profiles", eg. dynamic app (large perm size), static server etc...

- Add flag to register file associations on startup?
- Read only key handle to registry key api

- Flag for registering native methods on launcher library (switch off for speed)
	- perhaps switch off by default (eclipse launcher can detect if library is present?)
	- jni.register=true

- Allow setting of environment variables in INI? 
- Should set WINRUN4J_DIR environment variable on startup so it can be used in INI file
  
  
- generate event log message dlls on the fly using pecoff4j?
	
Resources
=========

- check launch4j and others for their format for storing jars in exe and
  try to be compatible
- allow embedding of html to display if launcher cannot find appropriate
  java version
  	ShellExecute(..., "res://path.to.exe?")
- add an api for accessing arbitrary resources on an exe/module
- associate a file type with secondary (or other) icon embedded.

? Maybe integrate RCEDIT into winrun4j binary and remove existing run on itself
  features. Should be minimal size overhead and would add useful features.  

Splash Screen
=============

- allow user to change splash image on the fly 
- allow user to store splash image in jar and specify via manifest
    (need a flag in INI: splash.searchManifest=true)
- add option to ini for initial setting of splash text:
	splash.text=Loading...
	splash.text.location=15,56
	splash.text.font=Arial
	splash.text.fontsize=14
	splash.text.rgb=23,56,12

Service Support
===============

- add checking for JVM hang 
	- the normal way is to have a native thread that attempts to call a java method (eg. System.timeinmiss)
	  if this fails to return in a "reasonable" length of time we have a problem i guess...
- restart the app
	- This could be achieved by creating a new built in command called "--WinRun4J:Restart <PID> <args>"
	  We wait for the PID to die then relaunch itself with args.
	- Will need a special one for restarting a service...
- automatically add -Xrs?



Build/Release
=============

- console version option to add "Press any key to continue..." at the end ??
- possibly split out win32 features from core executable
	* registry access
	* event log
	* resource access
	* shell api
	* possibly arbitrary function calls with callback support
	* implement a wrapper api over win32 functions (eg. dde, com?, 
	  shell)
- look at supporting an open source VM impl. possibly build a version that includes
  a VM (ie. statically link the VM to the executable). maybe jamvm.

OSGI Support
============

- create an osgi launcher. start with eclipse. embedded launcher for directory
  of jars with versions etc...
  equinox.application=org.boris.xlloop.dataservice.XLLoopDataService
  should create one for applications and one for services.    
- eclipse integration (run/debug winrun4j application)
- write an article about osgi service as windows service.
- create a bundle startup service + native filesystem listener for extra
  bundles that automatically get installed/started
  * probably need specific implementations for each osgi implementation...
 
  
